import os
import ast

def analyze_source_file(file_path):
    """
    Analyse un fichier source Python pour identifier les modules, classes et fonctions.

    :param file_path: Le chemin du fichier source à analyser.
    :return: Une structure représentant les répertoires et fichiers.
    """
    structure = []
    base_file_name = os.path.splitext(os.path.basename(file_path))[0]
    
    # Crée un répertoire pour le module
    structure.append({base_file_name: []})

    try:
        with open(file_path, 'r') as f:
            node = ast.parse(f.read(), filename=file_path)
            
            for item in node.body:
                if isinstance(item, ast.ClassDef):
                    structure[-1][base_file_name].append(f'{item.name}.py') # Création d'un fichier pour la classe
                elif isinstance(item, ast.FunctionDef):
                    structure[-1][base_file_name].append(f'{item.name}.py') # Création d'un fichier pour la fonction
    except Exception as e:
        print(f"Erreur lors de l'analyse du fichier '{file_path}': {e}")
        return []

    return structure

def create_directory_structure(base_path, structure):
    """
    Crée les répertoires et fichiers selon la structure fournie.

    :param base_path: Le chemin de base où créer la structure.
    :param structure: Une liste représentant la structure des répertoires et fichiers.
    """
    for item in structure:
        if isinstance(item, dict):
            for dir_name, contents in item.items():
                dir_path = os.path.join(base_path, dir_name)
                try:
                    os.makedirs(dir_path, exist_ok=True)
                    create_directory_structure(dir_path, contents)
                except Exception as e:
                    print(f"Erreur lors de la création du répertoire '{dir_path}': {e}")
        elif isinstance(item, str):
            file_path = os.path.join(base_path, item)
            try:
                with open(file_path, 'w') as f:
                    f.write(f"# Fichier {item} créé automatiquement.\n") # Contenu par défaut
            except Exception as e:
                print(f"Erreur lors de la création du fichier '{file_path}': {e}")

def main():
    """
    Fonction principale qui exécute le script.
    """
    input_file = "mon_script.py" # Fichier source à analyser
    base_path = "mon_projet" # Nom du répertoire de base pour la création de la structure

    # Vérification de l'existence du fichier d'entrée
    if not os.path.isfile(input_file):
        print(f"Erreur : Le fichier '{input_file}' n'existe pas ou n'est pas un fichier valide.")
        return

    # Vérification de l'existence du répertoire de base
    if os.path.exists(base_path):
        print(f"Erreur : Le répertoire '{base_path}' existe déjà. Veuillez le renommer ou le supprimer avant de continuer.")
        return

    print("Analyse du fichier source...")
    structure = analyze_source_file(input_file)

    if structure:
        print("Création de la structure de répertoires et fichiers...")
        try:
            os.makedirs(base_path) # Crée le répertoire de base
            create_directory_structure(base_path, structure)
            print("La structure a été créée avec succès dans :", base_path)
        except Exception as e:
            print(f"Erreur lors de la création du répertoire de base '{base_path}': {e}")
    else:
        print("Aucune structure à créer.")

if __name__ == "__main__":
    main()
```
